[
  {
    "objectID": "example.html",
    "href": "example.html",
    "title": "Example application",
    "section": "",
    "text": "The purpose of mapping underserved and overburdened communities is to monitor and report on TBEP’s contribution to increasing equitable and fair access to environmental benefits in Tampa Bay. In line with the goals of the Justice40 Initiative, TBEP’s Equity Strategy has a goal to ensure that at least 40% of the benefits from our activities are distributed to underserved and overburdened communities.\nRecognizably, there are a myriad of benefits that flow from the diverse conservation, restoration, and outreach activities that TBEP produces, spanning the many provisioning, supporting, regulating, and cultural services provided by nature. While we support ongoing efforts to develop additional methodologies to quantify these unique services provided by different activities, TBEP considers the following factors when defining and measuring the flow of benefits from our activities for each fiscal year:\nConsideration of these metrics relative to all projects occurring more than one mile of underserved communities will inform TBEP’s progress toward the 40% target. Notably, these metrics represent indicators of distributive equity only. Additional metrics will be developed to monitor and report progress on targets for procedural and recognitional equity.\nBelow, we have provided an example of how we can utilize the maps of underserved and overburdened communities to estimate progress toward achieving the 40% distributive equity target. This example is for illustrative purposes only and represents a subset of activities that will be monitored and reported by TBEP.\nLoad the required R packages (install first as needed).\nLoad the map of underserved and overburdened (under/over) communities in Tampa Bay made in the previous pages."
  },
  {
    "objectID": "example.html#baseline-equity-stats-for-restoration-projects-in-2020-and-2021",
    "href": "example.html#baseline-equity-stats-for-restoration-projects-in-2020-and-2021",
    "title": "Example application",
    "section": "Baseline equity stats for restoration projects in 2020 and 2021",
    "text": "Baseline equity stats for restoration projects in 2020 and 2021\nThe Tampa Bay Water Atlas, hosted by USF Water Institute, contains point locations of habitat restoration projects in the Tampa Bay watershed since the 1970s. As of March 2023, the most recent projects mapped in the dataset are from 2021: https://www.tampabay.wateratlas.usf.edu/restoration/.\nIn addition to location, the dataset includes other project attributes (as available), such as year, project name, habitat type, type of activity, lead and other partners, primary funding source, approximate area (acres), and total project cost ($). We will use this data to establish a baseline of benefits to under/over communities from TBEP programs.\nNOTE: Information and completeness vary by project, with more recent projects often containing more detailed and reliable information. Data from 2020 and 2021 are the most reliable and complete. However, some errors may exist, as the dataset continues to be updated and refined.\nDownload the data from the Tampa Bay Water Atlas. The file is downloaded to a temporary directory.\n\n# url with zip gdb to download\nurlin <- 'https://maps.wateratlas.usf.edu/downloads/TampaBay_Restoration.zip'\n\n# download file\ntmp1 <- tempfile(fileext = \".zip\")\ndownload.file(url = urlin, destfile = tmp1)\n\nUnzip the geodatabase that was downloaded to a second temporary directory.\n\n# unzip file\ntmp2 <- tempdir()\nutils::unzip(tmp1, exdir = tmp2)\n\nRead the point layer from the geodatabase and transform to the relevant projected coordinate system (EPSG 6443 for Tampa Bay).\n\n# get the layers from the gdb\ngdbpth <- list.files(tmp2, pattern = '\\\\.gdb$', full.names = T)\ngdbpth <- gsub('\\\\\\\\', '/', gdbpth)\nlyr <- st_layers(gdbpth)$name\n\n# load the layer with the most recent data (2021)\nrest <- st_read(dsn = gdbpth, 'TBRestoration_2021')\n\nReading layer `TBRestoration_2021' from data source \n  `/tmp/RtmpHpv2Ho/TampaBay_Restoration2020.gdb' using driver `OpenFileGDB'\nSimple feature collection with 679 features and 26 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -9221623 ymin: 3179556 xmax: 1.844674e+15 ymax: 1.844674e+15\nProjected CRS: WGS 84 / Pseudo-Mercator\n\nrest <- st_transform(rest, crs = 6443)\n\nFilter the dataset to keep only the restoration projects that meet the following criteria for inclusion in our project reporting:\n\nHas valid coordinates, AND\nProject year is between 2020-2021, AND\nLead partner is TBEP, OR\nPrimary funding source is TBEP, TBERF, Bay Mini-Grants, or RESTORE Act Grant\n\n\ntbrest <- rest %>%\n  filter(Latitude > 0,\n         Project_Year >= 2020,\n         grepl('TBEP|Tampa Bay Estuary Program', Lead_Partner) |\n         grepl('TBEP|Tampa Bay Estuary Program|TBERF|Tampa Bay Environmental Restoration Fund|Bay Mini-Grant|RESTORE', Primary_Funding_Source))\n\nCreate a 1 mile buffer around the restoration sites.\n\n# 1 mile buffer (5280 ft)\ntbrestbuff <- st_buffer(tbrest, dist = 5280)\n\nmapviewOptions(\"basemaps.color.shuffle\" = FALSE)\nmapview(tbrestbuff, zcol = \"Activity\", col.regions = list(\"yellow\",\"blue\"), layer.name = \"Activity\", label = \"Project_Name\")\n\n\n\n\n\n\nIntersect the buffered sites with the underserved and overburdened layer.\n\ntbrestbuff_int <- st_intersection(tbrestbuff, dattbequity)\n\nCreate a table characterizing the projects that are within or over 1 mile from under/over communities for each year and merge with the restoration layer.\n\nsummaries <- tbrestbuff_int %>%\n  group_by(Project_Year, Project_Name, overburdened) %>%\n  summarise(CCagloss = sum(thresholdEJ_agloss, na.rm = TRUE),\n            CCfloodr = sum(thresholdEJ_floodr, na.rm = TRUE),\n            NPgreens = sum(thresholdEJ_greens, na.rm = TRUE),\n            APpm2.5 = sum(thresholdEJ_pm2.5, na.rm = TRUE),\n            APtrafic = sum(thresholdEJ_trafic, na.rm = TRUE),\n            WPwastew = sum(thresholdEJ_wastew, na.rm = TRUE),\n            OPhwaste = sum(thresholdEJ_hwaste, na.rm = TRUE),\n            OPugtank = sum(thresholdEJ_ugtank, na.rm = TRUE),\n            OPsfunds = sum(thresholdEJ_sfunds, na.rm = TRUE),\n            OPbfield = sum(thresholdEJ_bfield, na.rm = TRUE),\n            OPphmine = sum(thresholdEJ_phmine, na.rm = TRUE),\n            LEredlin = sum(thresholdEJ_redlin, na.rm = TRUE)) %>%\n  mutate(underserved = \"Yes\") %>%\n  as.data.frame()\n\ntbrest <- left_join(tbrest, summaries, by = c(\"Project_Year\", \"Project_Name\")) %>%\n  mutate(underserved = coalesce(underserved, \"No\"),\n         overburdened = coalesce(overburdened, \"No\"))\n\nSome cleaning of the data is required for this version of the dataset to remove non-numeric characters from the cost field.\n\n# cleaning required for project cost layer (remove text, $, commas, etc.)\ntbrest <- tbrest %>%\n  mutate(cost = sub(\" \\\\(.*\", \"\", Total_Project_Cost)) %>%\n  mutate(cost = gsub(\"[^0-9.-]\", \"\", cost))\n\ntbrest$cost <- as.numeric(tbrest$cost)\n\nCreate annual summary stats for our three measures of distributive equity.\n\nannual_stats1 <- as.data.frame(tbrest) %>%\n  group_by(Project_Year, underserved) %>%\n  summarise(Projects_N = n())\n\nannual_stats2 <- as.data.frame(tbrest) %>%\n  group_by(Project_Year, underserved) %>%\n  summarise(Projects_cost = sum(cost, na.rm = TRUE))\n\nannual_stats3 <- as.data.frame(tbrest) %>%\n  group_by(Project_Year, underserved) %>%\n  summarise(Projects_area = sum(Acres, na.rm = TRUE))\n\nannual_stats <- left_join(annual_stats1, annual_stats2, c(\"Project_Year\", \"underserved\")) %>%\n  left_join(annual_stats3, c(\"Project_Year\", \"underserved\")) %>%\n  mutate(Pct_N = Projects_N/sum(Projects_N)*100) %>%\n  mutate(Pct_cost = Projects_cost/sum(Projects_cost)*100) %>%\n  mutate(Pct_area = Projects_area/sum(Projects_area)*100)\n\n# view table\nannual_stats\n\n# A tibble: 4 × 8\n# Groups:   Project_Year [2]\n  Project_Year underserved Projects_N Projects_c…¹ Proje…² Pct_N Pct_c…³ Pct_a…⁴\n         <dbl> <chr>            <int>        <dbl>   <dbl> <dbl>   <dbl>   <dbl>\n1         2020 No                   7      214500    21.1     50    48.2   70.1 \n2         2020 Yes                  7      230500     9       50    51.8   29.9 \n3         2021 No                  14      883196.  144.      70    66.4   98.0 \n4         2021 Yes                  6      447058     2.97    30    33.6    2.02\n# … with abbreviated variable names ¹​Projects_cost, ²​Projects_area, ³​Pct_cost,\n#   ⁴​Pct_area\n\n\nThe table shows that in 2020, 50% of restoration projects were within 1 mile of underserved communities. Additionally, 52% of funding went to projects near these communities, and 30% of the total area covered by all projects was for projects near these communities.\nThis share of benefits decreased in 2021: 30% of projects, 34% of funding, and just 2% of total area was for projects within 1 mile of underserved communities. Note: accuracy of area estimates vary between projects due to reporting errors\nCalculating over both years, we get the following: Projects - 38%, Funding - 38%, Area - 7%\n\ntotal_stats1 <- annual_stats %>%\n  group_by(underserved) %>%\n  summarise(Projects_N = sum(Projects_N, na.rm = TRUE))\n\ntotal_stats2 <- annual_stats %>%\n  group_by(underserved) %>%\n  summarise(Projects_cost = sum(Projects_cost, na.rm = TRUE))\n\ntotal_stats3 <- annual_stats %>%\n  group_by(underserved) %>%\n  summarise(Projects_area = sum(Projects_area, na.rm = TRUE))\n\ntotal_stats <- left_join(total_stats1, total_stats2, by = \"underserved\") %>%\n  left_join(total_stats3, by = \"underserved\") %>%\n  mutate(Pct_N = Projects_N/sum(Projects_N)*100) %>%\n  mutate(Pct_cost = Projects_cost/sum(Projects_cost)*100) %>%\n  mutate(Pct_area = Projects_area/sum(Projects_area)*100)\n\n# view table\ntotal_stats\n\n# A tibble: 2 × 7\n  underserved Projects_N Projects_cost Projects_area Pct_N Pct_cost Pct_area\n  <chr>            <int>         <dbl>         <dbl> <dbl>    <dbl>    <dbl>\n1 No                  21      1097696.         165.   61.8     61.8    93.2 \n2 Yes                 13       677558           12.0  38.2     38.2     6.75\n\n\nWe can visualize these stats with ggplot.\n\nplot1 <- ggplot(annual_stats, aes(x=as.factor(Project_Year), y=Projects_N)) +\n  geom_bar(aes(fill = underserved), stat=\"identity\") +\n  xlab(\"Year\") +\n  ylab(\"Number of Restoration Projects\") +\n  theme(legend.position=\"top\") +\n  scale_fill_discrete(name=\"\",labels=c('Over 1 mile', 'Within 1 mile')) +\n  ggtitle(\"Proximity to Underserved Communities\")\n\nplot2 <- ggplot(annual_stats, aes(x=as.factor(Project_Year), y=Projects_area)) +\n  geom_bar(aes(fill = underserved), stat=\"identity\")+\n  xlab(\"Year\") +\n  ylab(\"Reported Area of Projects (acres)\") +\n  theme(legend.position=\"top\") +\n  scale_fill_discrete(name=\"\",labels=c('Over 1 mile', 'Within 1 mile')) +\n  ggtitle(\"Proximity to Underserved Communities\")\n\nplot3 <- ggplot(annual_stats, aes(x=as.factor(Project_Year), y=Projects_cost/1000)) +\n  geom_bar(aes(fill = underserved), stat=\"identity\") +\n  xlab(\"Year\") +\n  ylab(\"Total Investment in Projects ($ thousand)\") +\n  theme(legend.position=\"top\") +\n  scale_fill_discrete(name=\"\",labels=c('Over 1 mile', 'Within 1 mile')) +\n  ggtitle(\"Proximity to Underserved Communities\") +\n  scale_y_continuous(labels = function(x) format(x, scientific = FALSE))\n\ngrid.arrange(plot1, plot2, plot3, ncol = 3, nrow = 1)\n\n\n\n\nWe can gather additional information from this dataset to complement these overall stats. For example, we can look at the different types of projects benefiting underserved communities and the burdens facing the communities that have benefited from these projects.\nFirst, let’s look at restoration activities compared to enhancement activities. Running the code below, we can see that 71% of projects within 1 mile of underserved communities in 2020 were enhancement activities, compared to 50% in 2021.\n\nannual_stats4 <- as.data.frame(tbrest) %>%\n  group_by(Project_Year, underserved, Activity) %>%\n  summarise(Projects_N = n()) %>%\n  mutate(Pct_N = Projects_N/sum(Projects_N)*100)\n\nannual_stats4\n\n# A tibble: 8 × 5\n# Groups:   Project_Year, underserved [4]\n  Project_Year underserved Activity    Projects_N Pct_N\n         <dbl> <chr>       <chr>            <int> <dbl>\n1         2020 No          Enhancement          5  71.4\n2         2020 No          Restoration          2  28.6\n3         2020 Yes         Enhancement          5  71.4\n4         2020 Yes         Restoration          2  28.6\n5         2021 No          Enhancement         12  85.7\n6         2021 No          Restoration          2  14.3\n7         2021 Yes         Enhancement          3  50  \n8         2021 Yes         Restoration          3  50  \n\n\nPlotting these stats gives a nice visual comparison of what projects tend to occur near underserved communities in the past.\n\nplot4 <- ggplot(annual_stats4, aes(x=as.factor(Project_Year), y=Projects_N)) +\n  geom_bar(aes(fill = underserved), stat=\"identity\") +\n  facet_grid(~ Activity) +\n  xlab(\"Year\") +\n  ylab(\"Number of Projects\") +\n  theme(legend.position=\"top\") +\n  scale_fill_discrete(name=\"\",labels=c('Over 1 mile', 'Within 1 mile')) +\n  ggtitle(\"Proximity to Underserved Communities\") +\n  theme(plot.title = element_text(hjust = 0.5))\n\nplot4\n\n\n\n\nFrom the graph above, we can see that benefits from restoration activities tend to be more equitably distributed to underserved communities than enhancement activities, even though enhancement activities are more common near these communities.\nNext, let’s look at the burdens facing the underserved communities that have benefited from past projects.\n\nannual_burden_stats <- as.data.frame(tbrest) %>%\n  filter(overburdened == \"Yes\") %>%\n  group_by(Project_Year) %>%\n  summarise(AgLoss = sum(ifelse(CCagloss > 0, 1, 0)),\n            FloodRisk = sum(ifelse(CCfloodr > 0, 1, 0)),\n            NatureDeprived = sum(ifelse(NPgreens > 0, 1, 0)),\n            PM2.5 = sum(ifelse(APpm2.5 > 0, 1, 0)),\n            Traffic = sum(ifelse(APtrafic > 0, 1, 0)),\n            Wastewater = sum(ifelse(WPwastew > 0, 1, 0)),\n            HazardousWaste = sum(ifelse(OPhwaste > 0, 1, 0)),\n            StorageTanks = sum(ifelse(OPugtank > 0, 1, 0)),\n            Superfunds = sum(ifelse(OPsfunds > 0, 1, 0)),\n            Brownfields = sum(ifelse(OPbfield > 0, 1, 0)),\n            Mines = sum(ifelse(OPphmine > 0, 1, 0)),\n            Redlining = sum(ifelse(LEredlin > 0, 1, 0))) %>%\n  mutate(Project_Year = as.factor(Project_Year))\n\n# convert from wide to long format\nannual_burden_stats <- annual_burden_stats %>%\n  melt(id.vars=\"Project_Year\", variable.name=\"Burden\", value.name=\"Projects_N\")\n\nplot5 <- ggplot(annual_burden_stats, aes(x=Project_Year, y=Projects_N)) +\n  geom_bar(aes(fill = Burden), color = \"black\", position=\"dodge\", stat=\"identity\") +\n  xlab(\"Year\") +\n  ylab(\"Number of Projects\") +\n  ggtitle(\"Projects Near Underserved Communities Facing Different Burdens\") +\n  theme(plot.title = element_text(hjust = 0.5))\n\nplot5\n\n\n\n\nWe can see that past projects within 1 mile of underserved communities tend to benefit communities in close proximity to leaking underground storage tanks and brownfield sites, as well as those with facing high risk of flooding under cliamate change. No projects during this period are located near underserved communities facing risks of agriculture loss, high PM2.5, or pollution from phosphate mines.\nMore investigations can be made using the various other attributes of the Tampa Bay Water Atlas.\n\nMapping benefits to communities\nWe can modify the steps above to identify the communities that are benefiting from TBEP activities. In this section, we will identify these communities and characterize the benefits flowing to them.\nIntersect the underserved and overburdened layer with the buffered sites.\n\ndattbequity_int <- st_intersection(dattbequity, tbrestbuff)\n\nCreate a table characterizing the tracts that are within or over 1 mile of restoration activities for each year and merge with the polygon layer.\n\nsummaries2 <- as.data.frame(dattbequity_int) %>%\n  group_by(ID, Project_Year, Restoration_Technique, Activity) %>%\n  summarise(Projects_N = n())\n\ndattbequity_projects <- full_join(dattbequity, summaries2, by = 'ID') %>%\n  mutate(Restoration_Technique = coalesce(Restoration_Technique, \"None\"),\n         Activity = coalesce(Activity, \"None\"),\n         Projects_N = coalesce(Projects_N, 0)) %>%\n  group_by(ID, EJissues1, EJissues1.1) %>%\n  summarise(Projects = sum(Projects_N),\n            Restoration = sum(Activity == \"Restoration\"),\n            Enhancement = sum(Activity == \"Enhancement\"),\n            ShorelineEnhance = sum(Restoration_Technique == \"Shoreline Stabilization/Enhancement\"),\n            VegetationBuffer = sum(Restoration_Technique == \"Vegetation Buffer\"),\n            Planting = sum(Restoration_Technique == \"Planting\"),\n            Reestablishment = sum(Restoration_Technique == \"Reestablishment\"),\n            OysterGardening = sum(Restoration_Technique == \"Oyster Gardening\"),\n            DebrisRemoval = sum(Restoration_Technique == \"Debris Removal\"),\n            InvasivesControl = sum(Restoration_Technique == \"Invasives Control/Removal - Vegetation\")) %>%\n  mutate(Activities = ifelse(Restoration > 0 & Enhancement > 0, \"Restoration & Enhancement\",\n                             ifelse(Restoration > 0 & Enhancement == 0, \"Restoration\",\n                                    ifelse(Restoration == 0 & Enhancement > 0, \"Enhancement\", \"None\"))))\n\nMap the number of projects occurring within 1 mile of each underserved tract during 2020-2021. You can see that past projects have provided more benefits to communities of south St. Petersburg and northern Tampa, while communities in Bradenton and the eastern inland areas of the watershed have none. Such a map can help us identify where we can direct future efforts to more equitably distribute the benefits of TBEP activities across the watershed.\n\nmapview(dattbequity_projects, zcol = \"Projects\", col.regions = brewer.pal(4, \"YlOrRd\"), layer.name = \"No. of Projects within 1 Mile\")\n\n\n\n\n\n\nYou can make additional maps to characterize communities based on activities. For example, we can map the type of projects that benefited underserved communities.\n\nmapview(dattbequity_projects, zcol = \"Activities\", col.regions = list(\"yellow\",\"gray\",\"blue\",\"green\"), layer.name = \"Activity\")\n\n\n\n\n\n\nWe can also look at different restoration techniques used for those projects.\n\nmap_planting <- dattbequity_projects %>%\n  filter(Planting > 0) %>%\n  mapview(zcol = \"Planting\", col.regions = \"green\", layer.name = \"Planting\")\n\nmap_oyster <- dattbequity_projects %>%\n  filter(OysterGardening  > 0) %>%\n  mapview(zcol = \"OysterGardening\", col.regions = \"black\", layer.name = \"Oyster Gardening\")\n\nmap_shore <- dattbequity_projects %>%\n  filter(ShorelineEnhance > 0) %>%\n  mapview(zcol = \"ShorelineEnhance\", col.regions = \"brown\", layer.name = \"Shoreline Enhancement\")\n\nmap_invasives <- dattbequity_projects %>%\n  filter(InvasivesControl  > 0) %>%\n  mapview(zcol = \"InvasivesControl\", col.regions = \"blue\", layer.name = \"Invasives Control\")\n\nsync(map_planting, map_oyster, map_shore, map_invasives)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe map above shows the underserved communities benefiting from planting (green), oyster gardening (black), shoreline enhancement (brown), and invasives control/removal (blue) activities."
  },
  {
    "objectID": "ejscreen.html",
    "href": "ejscreen.html",
    "title": "Getting demographic data",
    "section": "",
    "text": "Below, we have provided instructions for downloading the data that will be used to identify underserved communities in Tampa Bay. To view instructions for cleaning the data and utilizing the demographic indices to map underserved communities, see Mapping underserved communities.\nLoad the required R packages (install first as needed).\n\nlibrary(sf)\nlibrary(mapview)\n\nTo collect demographic data that will be used for identifying underserved communities, we will be downloading U.S. census data provided by the EPA’s 2022 Environmental Justice Screening Tool (EJScreen). This data is available from https://gaftp.epa.gov/EJSCREEN/2022/. Here you will find different versions of EJScreen data that are summarized, calculated, and visualized in different ways to meet your particular needs (e.g., census blocks or tracts, state or national percentiles, tabular or spatial data).\nIn our case, we are interested in obtaining spatial data for the supplemental demographic indices, summarized at the both the census block group and tract levels, using national percentiles as our thresholds for identifying underserved communities. Block groups are statistical divisions of census tracts, generally defined to contain between 600-3,000 people. This is the highest resolution of spatial data provided by EJScreen. Census tracts represent aggregated block groups of 1,200-8,000 people. This level is advantageous because it is the highest resolution for which the federal government provides standardized demographic, socioeconomic, and environmental data.\n\nData by census block group\nThe appropriate file to download for our requirements at the block group level is “EJSCREEN_2022_Supplemental_with_AS_CNMI_GU_VI.gdb.zip”.\nDownload the relevant file from EJScreen. The file is downloaded to a temporary directory. Note that it is a large file (~480mb) and will take some time.\n\n# url with zip gdb to download\nurlin <- 'https://gaftp.epa.gov/EJSCREEN/2022/EJSCREEN_2022_Supplemental_with_AS_CNMI_GU_VI.gdb.zip'\n\n# download file\ntmp1 <- tempfile(fileext = \".zip\")\ndownload.file(url = urlin, destfile = tmp1)\n\nUnzip the geodatabase that was downloaded to a second temporary directory.\n\n# unzip file\ntmp2 <- tempdir()\nutils::unzip(tmp1, exdir = tmp2)\n\nRead the polygon layer from the geodatabase.\n\n# get the layers from the gdb\ngdbpth <- list.files(tmp2, pattern = '\\\\.gdb$', full.names = T)\ngdbpth <- gsub('\\\\\\\\', '/', gdbpth)\nlyr <- st_layers(gdbpth)$name\n\n# read the layer\ndat <- st_read(dsn = gdbpth, lyr)\n\nTo exclude blocks outside of our watershed boundary, intersect the layer with the Tampa Bay watershed. If working in a different area, you will want to replace the tbshed shapefile with your own boundary file.\n\nload(file = 'data/tbshed.RData')\n\n# intersect the layer with the tb watershed\ntb_blockgroup <- dat %>% \n  st_transform(crs = st_crs(tbshed)) %>% \n  st_make_valid() %>% \n  st_intersection(tbshed)\n\nThe layer can be saved as an RData object if needed. The size should be minimal (~2mb).\n\n# save the layer as an RData object (~1mb)\nsave(tb_blockgroup, file = 'data/tb_blockgroup.RData')\n\nView the data using mapview. You can see that we now have the desired spatial data just for our watershed.\n\nload(file = 'data/tb_blockgroup.RData')\n\nmapview(tb_blockgroup)\n\n\n\n\n\n\nUnlink the temporary files to delete them when you are finished.\n\nunlink(tmp1, recursive = TRUE)\nunlink(gdbpth, recursive = TRUE)\n\n\n\nData by census tract\nThe appropriate file to download for our requirements at the tract level is “EJSCREEN_2022_Supplemental_with_AS_CNMI_GU_VI_Tracts.gdb.zip”.\nDownload the relevant file from EJScreen. The file is downloaded to a temporary directory (~260mb).\n\n# url with zip gdb to download\nurlin <- 'https://gaftp.epa.gov/EJSCREEN/2022/EJSCREEN_2022_Supplemental_with_AS_CNMI_GU_VI_Tracts.gdb.zip'\n\n# download file\ntmp1 <- tempfile(fileext = \".zip\")\ndownload.file(url = urlin, destfile = tmp1)\n\nUnzip the geodatabase that was downloaded to a second temporary directory.\n\n# unzip file\ntmp2 <- tempdir()\nutils::unzip(tmp1, exdir = tmp2)\n\nRead the polygon layer from the geodatabase.\n\n# get the layers from the gdb\ngdbpth <- list.files(tmp2, pattern = '\\\\.gdb$', full.names = T)\ngdbpth <- gsub('\\\\\\\\', '/', gdbpth)\nlyr <- st_layers(gdbpth)$name\n\n# read the layer\ndat <- st_read(dsn = gdbpth, lyr)\n\nTo exclude census tracts outside of our watershed boundary, intersect the layer with the Tampa Bay watershed. If working in a different area, you will want to replace the tbshed shapefile with your own boundary file.\n\nload(file = 'data/tbshed.RData')\n\n# intersect the layer with the tb watershed\ntb_tract <- dat %>% \n  st_transform(crs = st_crs(tbshed)) %>% \n  st_make_valid() %>% \n  st_intersection(tbshed)\n\nThe layer can be saved as an RData object if needed. The size should be minimal (~1mb).\n\n# save the layer as an RData object (~1mb)\nsave(tb_tract, file = 'data/tb_tract.RData')\n\nView the data using mapview. You can see that we now have the desired spatial data just for our watershed.\n\nload(file = 'data/tb_tract.RData')\n\nmapview(tb_tract)\n\n\n\n\n\n\nUnlink the temporary files to delete them when you are finished.\n\nunlink(tmp1, recursive = TRUE)\nunlink(gdbpth, recursive = TRUE)"
  },
  {
    "objectID": "overburdened.html",
    "href": "overburdened.html",
    "title": "Mapping underserved and overburdened communities",
    "section": "",
    "text": "Below, we have provided instructions for replicating our methodology for mapping underserved and overburdened communities in Tampa Bay. To view instructions for downloading the necessary source data, as well as an overview of the environmental justice metrics we consider, see Getting environmental justice data.\nLoad the required R packages (install first as needed).\n\nlibrary(sf)\nlibrary(mapview)\nlibrary(dplyr)\nlibrary(RColorBrewer)\nlibrary(leafsync)\n\nLoad the map of underserved communities in Tampa Bay made in the previous page. Map the number of burdens facing underserved communities across the watershed.\n\nload(file = 'data/dattbunderover.RData')\n\nmapview(dattbunderover, zcol = \"thresholdEJ_N\", col.regions = brewer.pal(8, \"YlOrRd\"), layer.name = \"No. of Burdens\")\n\n\n\n\n\n\nView the underserved tracts that also meet our definition of overburdened communities. The areas in red are those that rank in the 80th percentile (or greater) nationally in one or more of the environmental justice screening variables.\n\nmapview(dattbunderover, zcol = \"overburdened\", col.regions = list(\"gray\",\"red\"), layer.name = \"Overburdened\")\n\n\n\n\n\n\nYou can see that all but 3 underserved tracts in our watershed are also considered overburdened by one or more EJ issue. Run the code below to create a field listing the major EJ issues facing each community, which you can view in the map by hovering your cursor over a tract.\n\ndattbunderover <- dattbunderover %>%\n  mutate(CC = ifelse(thresholdEJ_agloss == 1 | thresholdEJ_floodr == 1, \"Climate Change\", NA),\n         NP = ifelse(thresholdEJ_greens == 1, \"Nature Deprevation\", NA),\n         AP = ifelse(thresholdEJ_pm2.5 == 1 | thresholdEJ_trafic == 1, \"Air Pollution\", NA),\n         WP = ifelse(thresholdEJ_wastew == 1, \"Water Pollution\", NA),\n         OP = ifelse(thresholdEJ_hwaste == 1 | thresholdEJ_ugtank == 1 | thresholdEJ_sfunds == 1 | thresholdEJ_bfield == 1 | thresholdEJ_phmine == 1, \"Other Pollution\", NA),\n         LE = ifelse(thresholdEJ_redlin == 1, \"Legacy Effects\", NA)) %>%\n  mutate(EJissues1 = paste(CC, NP, AP, WP, OP, LE, sep = \", \")) %>%\n  mutate(EJissues1 = gsub('NA, ', '', EJissues1)) %>%\n  mutate(EJissues1 = gsub(', NA', '', EJissues1))\n\nmapview(dattbunderover, zcol = \"thresholdEJ_N\", col.regions = brewer.pal(8, \"YlOrRd\"), label = \"EJissues1\", layer.name = \"No. of Burdens\")\n\n\n\n\n\n\nRun the code below to create another field listing the specific EJ issues facing each community. Hover over the tracts to see the changes.\n\ndattbunderover <- dattbunderover %>%\n  mutate(agloss = ifelse(thresholdEJ_agloss == 1, \"Agriculture loss\", NA),\n         floodr = ifelse(thresholdEJ_floodr == 1, \"Flood risk\", NA),\n         greens = ifelse(thresholdEJ_greens == 1, \"Lack of green space\", NA),\n         pm2.5 = ifelse(thresholdEJ_pm2.5 == 1, \"PM2.5\", NA),\n         trafic = ifelse(thresholdEJ_trafic == 1, \"Traffic volume\", NA),\n         wastew = ifelse(thresholdEJ_wastew == 1, \"Wastewater discharge\", NA),\n         hwaste = ifelse(thresholdEJ_hwaste == 1, \"Hazardous waste facilities\", NA),\n         ugtank = ifelse(thresholdEJ_ugtank == 1, \"Underground storage tanks\", NA),\n         sfunds = ifelse(thresholdEJ_sfunds == 1, \"Superfund sites\", NA),\n         bfield = ifelse(thresholdEJ_bfield == 1, \"Brownfield sites\", NA),\n         phmine = ifelse(thresholdEJ_phmine == 1, \"Phosphate mining\", NA),\n         redlin = ifelse(thresholdEJ_redlin == 1, \"Historic redlining\", NA)) %>%\n  mutate(EJissues1.1 = paste(agloss, floodr, greens, pm2.5, trafic, wastew, hwaste, ugtank, sfunds, bfield, phmine, redlin, sep = \", \")) %>%\n  mutate(EJissues1.1 = gsub('NA, ', '', EJissues1.1)) %>%\n  mutate(EJissues1.1 = gsub(', NA', '', EJissues1.1))\n\nmapview(dattbunderover, zcol = \"thresholdEJ_N\", col.regions = brewer.pal(8, \"YlOrRd\"), label = \"EJissues1.1\", layer.name = \"No. of Burdens\")\n\n\n\n\n\n\nYou can also use this data to compare underserved communities facing different EJ challenges. The code below allows you to compare locations of communities with 4 different burdens at once.\n\nmap_flood <- dattbunderover %>%\n  filter(thresholdEJ_floodr == 1) %>%\n  mapview(zcol = \"floodr\", col.regions = \"blue\", layer.name = \"Burden\")\n\nmap_wastew <- dattbunderover %>%\n  filter(thresholdEJ_wastew == 1) %>%\n  mapview(zcol = \"wastew\", col.regions = \"black\", layer.name = \"Burden\")\n\nmap_greens <- dattbunderover %>%\n  filter(thresholdEJ_greens == 1) %>%\n  mapview(zcol = \"greens\", col.regions = \"green\", layer.name = \"Burden\")\n\nmap_bfield <- dattbunderover %>%\n  filter(thresholdEJ_bfield == 1) %>%\n  mapview(zcol = \"bfield\", col.regions = \"brown\", layer.name = \"Burden\")\n\nsync(map_flood, map_wastew, map_greens, map_bfield)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe have saved this final layer as an RData object for internal and external use. This will serve as the primary data guiding our Equity Strategy, and external parties are free to download this data for their own use.\n\n# save the layer as an RData object\ndattbequity <- dattbunderover %>%\n  rowwise() %>%\n  select(matches('^threshold|^ID|^under|^over|^EJissues'))\n\n\nsave(dattbunderover, file = 'data/dattbequity.RData')"
  },
  {
    "objectID": "cejst.html",
    "href": "cejst.html",
    "title": "Getting environmental justice data",
    "section": "",
    "text": "Under the new Equity Strategy, our goal is to ensure at least 40% of the benefits from TBEP activities are directed to underserved communities (see Mapping underserved communities). Many of these underserved communities are also disproportionately burdened by pollution, expected impacts from climate change, and lack of green space. Understanding which communities face different burdens can help TBEP prioritize different activities to help mitigate or reduce the burdens facing these communities.\nTBEP has selected the following 12 factors representing (1) those most relevant to the burdens facing communities in Tampa Bay and (2) environmental injustices that could be reduced by the benefits of TBEP activities:\nBelow, we have provided instructions for downloading, cleaning, and analyzing the data that will be used to characterize the burdens facing communities in Tampa Bay. To view instructions for utilizing the final data to map underserved and overburdened communities, see Mapping underserved and overburdened communities.\nLoad the required R packages (install first as needed)."
  },
  {
    "objectID": "cejst.html#cejst-data",
    "href": "cejst.html#cejst-data",
    "title": "Getting environmental justice data",
    "section": "CEJST Data",
    "text": "CEJST Data\nThe U.S. Council on Environmental Quality has developed the Climate and Economic Justice Screening Tool (CEJST) to assist users in identifying overburdened communities using a similar methodology as EJScreen, in which national percentiles are used as thresholds for flagging census tracts that are significantly burdened by one or more indicators spanning climate change, energy, health, housing, pollution, and other dimensions. The data is available from https://screeningtool.geoplatform.gov/en/downloads.\nCEJST provides the percentiles we need for 10 out of the 12 variables we use for identifying overburdened communities. Below are brief descriptions of the variables and how they are estimated, and more information about the data, sources, and methodologies can be found here.\n\nExpected agricultural loss rate: Expected agricultural value at risk from losses due to fourteen types of natural hazards linked to climate change.\nProjected flood risk: Number of properties at risk of floods occurring in the next 30 years from tides, rain, riverine or storm surges based on a climate-adjusted model.\nPM2.5 in the air: Weight of fine inhalable particles (< 2.5 micrometers in diameter) per cubic meter.\nHistoric underinvestment: Census tracts that experienced historic underinvestment based on redlining maps created between 1935-1940.\nLack of green space: Share of land with developed surfaces covered with artificial materials (e.g. concrete, pavement).\nProximity to hazardous waste facilities: Number of hazardous waste facilities within 5 km (or nearest beyond 5 km) divided by distance.\nProximity to Superfund sites: Number of proposed or listed Superfund or National Priorities list (NPL) sites within 5 km (or nearest beyond 5 km) divided by distance.\nTraffic proximity and volume: Number of vehicles (average annual daily traffic) at major roads within 500 m, divided by distance.\nUnderground storage tanks and releases: Density of leaking underground storage tanks divided by all active underground storage tanks within 1,500 ft.\nWastewater discharge: Modeled toxic concentrations in stream segments within 500 m, divided by distance.\n\nDownload the CEJST zip file to temp directory and unzip to temp directory.\n\nurlin <- 'https://static-data-screeningtool.geoplatform.gov/data-versions/1.0/data/score/downloadable/1.0-shapefile-codebook.zip'\n\ntmp1 <- tempfile(fileext = \".zip\")\ndownload.file(url = urlin, destfile = tmp1)\n\ntmp2 <- tempdir()\nunzip(tmp1, exdir = tmp2)\n\nUnzip the ‘usa.zip’ file in the folder.\n\nzip1 <- list.files(tmp2, 'usa\\\\.zip', full.names = T)\nunzip(zip1, exdir = tmp2)\n\nGet file path for ‘usa.shp’ and import with sf.\n\ncejst <- list.files(tmp2, '\\\\.shp', full.names = T)\ndatcejst <- st_read(cejst)\n\nTo exclude census tracts outside of our watershed boundary, intersect the layer with the Tampa Bay watershed. If working in a different area, you will want to replace the tbshed shapefile with your own boundary file. In this case, the coordinate system is the same, so there’s no need to transform.\n\nload(file = 'data/tbshed.RData')\n\ndattbcejst <- datcejst %>% \n  st_intersection(tbshed)\n\nsave(dattbcejst, file = 'data/dattbcejst.RData')\n\nView the data. It will look similar to the EJScreen data.\n\n\n\n\nmapview(dattbcejst)\n\n\n\n\n\n\nUnfortunately, the census tracts from CEJST are not completely identical to the census tracts in EJScreen. The tracts provided by CEJST, when they do differ, are primarily at a larger scale (e.g., one CEJST tract may be split into 2 tracts in EJScreen data). We prefer to work from the higher resolution tracts (EJScreen), so we need to make sure, for each EJScreen tract, we pull the relevant data from the CEJST tract. Notably, some of the resulting tract data may not be entirely accurate, as percentiles may apply to the larger CEJST tract but not necessarily to the tracts as split by the EJScreen data. As of February 2023, the tract boundaries between EJScreen and CEJST have yet to be harmonized, but this may change in future versions of these tools.\nIf you’ve already created the ‘dattbindex’ shapefile from “Mapping underserved communities,” you can simply load that shapefile. Here, we’ll load the ‘dattb’ shapefile and quickly replicate the creation of ‘dattbindex’ as a reminder.\n\n# if saved\nload(file = 'data/dattbindex.Rdata')\n\n# otherwise replicate\nload(file = 'data/dattb.RData')\n\ndattbindex <- dattb %>%\n  filter(ACSTOTPOP > 0) %>%\n  mutate(threshold_income = ifelse(P_LWINCPCT >= 80, 1, 0),\n         threshold_unempl = ifelse(P_UNEMPPCT >= 80, 1, 0),\n         threshold_lingui = ifelse(P_LNGISPCT >= 80, 1, 0),\n         threshold_educat = ifelse(P_LESHSPCT >= 80, 1, 0),\n         threshold_lifexp = ifelse(P_LIFEEXPCT >= 80, 1, 0)) %>%\n  rowwise() %>%\n  select(matches('^threshold|^ID')) %>% \n  mutate(threshold_N = sum(threshold_income,threshold_unempl,threshold_lingui,threshold_educat,threshold_lifexp, na.rm = TRUE)) %>%\n  mutate(underserved = ifelse(threshold_N > 1, \"Yes\", \"No\"))\n\nKeep only those tracts that are classified as underserved.\n\n\n\n\ndattbunder <- dattbindex %>%\n  filter(underserved == \"Yes\")\n\nmapview(dattbunder, layer.name = \"Underserved Communities\")\n\n\n\n\n\n\nWe will create representative points out of the underserved EJScreen tracts. We can then attribute the values of the underlying CEJST tracts to each point, and then merge those values into ‘dattbunder’. Similar to the thresholds defined for identifying underserved communities, we define “overburdened” communities as those that fall within the 80th percentile (or greater) nationally on at least 1 of the 12 measures of environmental justice outlined above.\n\ncejstvalues <- st_point_on_surface(dattbunder) %>%\n  st_intersection(dattbcejst) %>%\n  mutate(thresholdEJ_agloss = ifelse(EALR_PFS >= 0.80, 1, 0),\n         thresholdEJ_floodr = ifelse(FLD_PFS >= 0.80, 1, 0),\n         thresholdEJ_greens = ifelse(IS_PFS >= 0.80, 1, 0),\n         thresholdEJ_pm2.5 = ifelse(PM25F_PFS >= 0.80, 1, 0),\n         thresholdEJ_trafic = ifelse(TF_PFS >= 0.80, 1, 0),\n         thresholdEJ_wastew = ifelse(WF_PFS >= 0.80, 1, 0),\n         thresholdEJ_hwaste = ifelse(TSDF_PFS >= 0.80, 1, 0),\n         thresholdEJ_ugtank = ifelse(UST_PFS >= 0.80, 1, 0),\n         thresholdEJ_sfunds = ifelse(NPL_PFS >= 0.80, 1, 0),\n         thresholdEJ_redlin = ifelse(HRS_ET >= 0.80, 1, 0)) %>%\n  rowwise() %>%\n  select(matches('^thresholdEJ|^ID')) %>%\n  as.data.frame()\n\ndattbunder_cejst <- left_join(dattbunder, cejstvalues, by = 'ID')"
  },
  {
    "objectID": "cejst.html#mining-data",
    "href": "cejst.html#mining-data",
    "title": "Getting environmental justice data",
    "section": "Mining Data",
    "text": "Mining Data\nAlthough CEJST provides data on abandoned coal mines, phosphate mining is a unique characteristic of Florida, and especially Tampa Bay. Of the 78 phosphate mining operations in the U.S. recorded by the U.S. Geological Survey, 29 (37%) are located in Florida, and 13 (17%) are within the Tampa Bay watershed. The potential impacts of phosphate mining are thus a unique burden to communities in our watershed, which is why we have opted to include phosphate rather than coal mines in our identification of overburdened communities.\nSpatial data is available from the Florida Department of Environmental Protection (FDEP) here. This is provided as a polygon layer, showing all active mandatory phosphate mines in Florida as of 2019. See the FDEP website for more details on the dataset.\nThe shapefile can be read in directly with st_read.\n\nmined <- st_read('https://ca.dep.state.fl.us/arcgis/rest/services/OpenData/MMP_MINEDUNITS/MapServer/0/query?outFields=*&where=1%3D1&f=geojson')\nmapview(mined)\n\nCEJST considers any census tract containing abandoned coal mines to be significantly burdened. We adopt the same approach for phosphate mines in Tampa Bay. Create an indicator for tracts that overlap with the phosphate mining units.\n\nsf_use_s2(FALSE)\n\nmaxval <- dattbunder_cejst %>%\n  st_join(mined) %>%\n  mutate(SITE_ID = coalesce(SITE_ID, 0)) %>% \n  mutate(dummyvar = ifelse(SITE_ID > 0, 1, 0)) %>%\n  group_by(ID) %>%\n  summarise(thresholdEJ_phmine = max(dummyvar)) %>%\n  as.data.frame()\n\ndattbunder_cejst_mines <- left_join(dattbunder_cejst, maxval, by = 'ID')"
  },
  {
    "objectID": "cejst.html#brownfield-data",
    "href": "cejst.html#brownfield-data",
    "title": "Getting environmental justice data",
    "section": "Brownfield Data",
    "text": "Brownfield Data\nProperties in which expansion, redevelopment, or reuse may be complicated by the potential presence of contaminants, called “brownfields,” are another important burden to some communities in Tampa Bay. While CEJST and EJScreen do not include the proximity of census tracts to brownfield sites in their national percentiles, the EPA hosts a database with the lat/lon coordinates of brownfield properties, called the Assessment, Cleanup, and Redevelopment Exchange System (ACRES). The data is available as KML point data here.\nDownload the zipped KML file to a temporary directory.\n\n# url with zipped kml\nurlin <- 'https://ordsext.epa.gov/FLA/www3/acres_frs.kmz'\n\n# download file\ntmp1 <- tempfile(fileext = \".kmz\")\ndownload.file(url = urlin, destfile = tmp1, method = 'curl')\n\nUnzip the KMZ file.\n\ntmp2 <- tempdir()\nunzip(tmp1, exdir = tmp2)\n\nGet the name of the KML file to read.\n\nlyr <- unzip(tmp1, list = T)$Name\nfl <- paste(c(tmp2, lyr), collapse = \"\\\\\")\nfl <- gsub('\\\\\\\\', '/', fl)\n\nRead the KML file with st_read and drop the Z dimension with st_zm. If you would like to only view brownfield sites in a particular area, below is an example for loading just the sites in the Tampa layer. You can view all possible locations in the kml file with st_layers. However, we need to create our brownfield metric using the nation-wide data, so you can skip this step.\n\ndat <- st_read(fl, layer = 'TAMPA') %>% \n  st_zm()\n\nTo import all layers in the kml file, identify the layer names and loop through them to add to a single object. The data are saved as an .Rdata object and .csv file for later use. The data include only the site name and location in decimal degrees.\nNOTE: This code takes several hours to complete. We have provided the code so that you may replicate this approach if desired, but for the sake of time, we recommend loading the Rdata object we have saved already (next step).\n\n# layer names\nalllyr <- st_layers(fl)$name\n\nstrt <- Sys.time()\nout <- NULL\nfor(i in alllyr){\n  \n  # counter\n  cat(i, which(i == alllyr), 'of', length(alllyr), '\\n')\n  print(Sys.time() - strt)\n  \n  # import each layer\n  dat <- st_read(fl, i, quiet = T)[, c('Name')]\n  \n  # append to same object\n  out <- rbind(out, dat)\n  \n}\n\n# save as RData object\nallbfld <- out %>% st_zm()\nsave(allbfld, file = 'data/allbfld.RData', compress = 'xz')\n\n# save as csv\nallbfldcsv <- allbfld %>% \n  mutate(\n    lon = st_coordinates(.)[,1], \n    lat = st_coordinates(.)[,2]\n  ) %>% \n  st_set_geometry(NULL)\nwrite.csv(allbfldcsv, 'data/allbfldcsv.csv', row.names = F)\n\nLoad and view the brownfield sites.\n\nload(file = 'data/allbfld.RData')\nmapview(allbfld, legend = F, col.regions = 'brown')\n\n\n\n\n\n\nYou can see the locations of all brownfield sites from the ACRES database across the country. We will use this data in a manner consistent with how CEJST measures a community’s proximity to hazardous waste facilities and Superfund sites.\nLoad the national census tract data from EJScreen if you have it saved from Getting demographic data. If not, download the data again using the same steps as before.\n\n# url with zip gdb to download\nurlin <- 'https://gaftp.epa.gov/EJSCREEN/2022/EJSCREEN_2022_Supplemental_with_AS_CNMI_GU_VI_Tracts.gdb.zip'\n\n# download file\ntmp1 <- tempfile(fileext = \".zip\")\ndownload.file(url = urlin, destfile = tmp1)\n\n# unzip file\ntmp2 <- tempdir()\nutils::unzip(tmp1, exdir = tmp2)\n\n# get the layers from the gdb\ngdbpth <- list.files(tmp2, pattern = '\\\\.gdb$', full.names = T)\ngdbpth <- gsub('\\\\\\\\', '/', gdbpth)\nlyr <- st_layers(gdbpth)$name\n\n# read the layer, keep only the tract ID to reduce size\nejscreen <- st_read(dsn = gdbpth, lyr) %>%\n  rowwise() %>%\n  select(matches('^ID')) \n\nFirst, we need to transform the brownfield and national EJScreen census tract data to an appropriate projected coordinate system so we can reliably calculate distances. For the U.S. (including Alaska and Hawaii), we will use the North America Albers Equal Area Conic (EPSG: 9822) projection.\n\nbfields <- st_transform(allbfld, crs = 9822)\ntracts <- st_transform(ejscreen, crs = 9822)\n\nIn line with the methodology for calculating proximity to hazardous waste facilities and Superfund sites, we will calculate each census tract’s proximity to brownfield sites as (1) the number of brownfield sites within 5 km of the tract divided by 5 km, or (2) if there are no sites within 5 km, then 1 divided by the distance to the nearest site. We will use Euclidean distances. Note that the units for distances will be in meters.\n\n# 5 km buffer (this will take several minutes)\ntractsbuff <- st_buffer(tracts, dist = 5000, endCapStyle = \"ROUND\")\n\n# number of brownfield sites within 5 km\ntractsbuff$brownfields_N <- lengths(st_intersects(tractsbuff, bfields))\n\n# distance to nearest brownfield site\nnearest <- st_nearest_feature(tracts, bfields)\ndistance <- st_distance(tracts, bfields[nearest,], by_element=TRUE)\njoined <- cbind(tracts, st_drop_geometry(bfields)[nearest,]) %>%\n  mutate(dist_m = distance) %>%\n  as.data.frame()\n\nproxbfield <- left_join(tractsbuff, joined, by = 'ID') %>%\n  as.data.frame() %>%\n  mutate(proximity = ifelse(brownfields_N > 0, brownfields_N/5000, 1/dist_m),\n         percentile = ntile(proximity, 100),\n         thresholdEJ_bfield = ifelse(percentile >= 80, 1, 0))\n\ndattbunder_cejst_mines_bfields <- left_join(dattbunder_cejst_mines, proxbfield, by = 'ID') %>%\n  mutate(thresholdEJ_N = sum(thresholdEJ_agloss,thresholdEJ_floodr,thresholdEJ_greens,thresholdEJ_pm2.5,thresholdEJ_trafic,thresholdEJ_wastew,thresholdEJ_hwaste,thresholdEJ_ugtank,thresholdEJ_sfunds,thresholdEJ_redlin,thresholdEJ_phmine,thresholdEJ_bfield, na.rm = TRUE)) %>%\n  mutate(overburdened = ifelse(thresholdEJ_N > 0, \"Yes\", \"No\")) %>%\n  rowwise() %>%\n  select(matches('^threshold|^ID|^under|^over'))\n\nSave this final layer as an RData object for future use.\n\n# save the layer as an RData object\ndattbunderover <- dattbunder_cejst_mines_bfields\nsave(dattbunderover, file = 'data/dattbunderover.RData')\n\nUnlink the temporary files to delete them when you are finished.\n\nunlink(tmp1, recursive = TRUE)\nunlink(gdbpth, recursive = TRUE)\nunlink(fl, recursive = TRUE)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Equity strategy overview",
    "section": "",
    "text": "The Tampa Bay Estuary Program (TBEP) is developing a methodology as part of its new Equity Strategy to identify historically underserved (i.e., disadvantaged) communities across the Tampa Bay watershed to support the goals of the White House’s Justice40 Initiative (EO 14008) and the Environmental Protection Agency’s Equity Action Plan (EO 13985). The purpose of this initiative is to ensure TBEP delivers equitable and fair access to the benefits from environmental programs for all communities.\nWe have created this webpage to increase transparency and reproducibility of the approach guiding our Equity Strategy. We have provided instructions for downloading, cleaning, and analyzing the data that will be used to identify underserved and overburdened communities in Tampa Bay. The methods described on the subsequent pages are presented in R coding language, but users who prefer working with GIS software (e.g., ArcGIS or QGIS) should also be able to reproduce the maps by following along in the descriptions of each step."
  },
  {
    "objectID": "index.html#what-do-we-consider",
    "href": "index.html#what-do-we-consider",
    "title": "Equity strategy overview",
    "section": "What do we consider?",
    "text": "What do we consider?\nTo identify underserved communities in Tampa Bay, we are guided by recommendations provided by the Environmental Protection Agency (EPA), as well as our own local knowledge and experience with the diverse population of more than 3 million people across the Tampa Bay watershed.\n\nProjects funded through BIL\nThe 2021 Bipartisan Infrastructure Law (BIL), implemented through the EPA and NEPs, provides approximately $909,800 in annual funding to each NEP over 2022-2026. TBEP has a goal to ensure that at least 40% of the benefits from BIL-funded projects during this period will flow to underserved (or disadvantaged) communities across Tampa Bay.\nThe EPA uses the EJScreen Supplemental Demographic Index to identify disadvantaged communities at the block group level. The Index is based on an average of the following five demographic variables:\n\nPercent classified as low income\nPercent unemployed\nPercent linguistically isolated (i.e., limited English speaking)\nPercent with less than a high school education\nPercent with low life expectancy\n\nIf the Supplemental Demographic Index score in a block group exceeds the 80th percentile nationally, it will be identified by the EPA as a disadvantaged community for the purposes of tracking Justice40 investments and benefits through BIL funded projects.\n\n\nProjects funded through other streams\nFor projects that are not funded by BIL, TBEP applies a more inclusive definition of underserved communities to identify opportunities for increasing environmental justice throughout the watershed. For this broader definition, we define underserved communities as those that fall within the 80th percentile (or higher) nationally for two or more of the five demographic variables listed above.\nAdditionally, our Equity Strategy recognizes the importance of tailoring TBEP’s environmental programs to address the most significant challenges facing different underserved communities in Tampa Bay. In an effort to promote environmental justice within our region, our approach characterizes underserved communities according to the unique burdens they are facing that could realistically be mitigated by TBEP activities. We define “overburdened” communities as those that fall within the 80th percentile (or higher) nationally for one or more of the following 12 environmental justice issues:\n\nClimate change: projected agricultural loss, projected flood risk\nNature deprivation: lack of green space\nAir pollution: PM2.5, traffic proximity/volume\nWater pollution: wastewater discharge\nOther pollution: hazardous waste facilities, underground storage tank release, Superfund sites, brownfield sites, phosphate mines\nLegacy effects: historic underinvestment/redlining"
  },
  {
    "objectID": "index.html#contact-us",
    "href": "index.html#contact-us",
    "title": "Equity strategy overview",
    "section": "Contact us",
    "text": "Contact us\nThis methodology may be adapted by other National Estuary Programs or local government partners developing their own equity strategies. Along with our descriptions of the methodology, we also briefly highlight the rationale behind our decisions, which may or may not be relevant or appropriate to other organizations. If you have questions or other feedback regarding the methodology, contact Dr. Blake Simmons at bsimmons@tbep.org."
  },
  {
    "objectID": "index.html#underserved-communities",
    "href": "index.html#underserved-communities",
    "title": "Equity strategy overview",
    "section": "Underserved communities",
    "text": "Underserved communities"
  },
  {
    "objectID": "index.html#underserved-and-overburdened-communities",
    "href": "index.html#underserved-and-overburdened-communities",
    "title": "Equity strategy overview",
    "section": "Underserved and overburdened communities",
    "text": "Underserved and overburdened communities\n\n\n\n\n\nNavigate through the Methods pages to create this data and replicate these maps."
  },
  {
    "objectID": "underserved.html",
    "href": "underserved.html",
    "title": "Mapping underserved communities",
    "section": "",
    "text": "Below, we have provided instructions for replicating our methodology for mapping underserved communities in Tampa Bay. To view instructions for downloading the necessary source data from EJScreen, see Getting demographic data.\nLoad the required R packages (install first as needed).\nLoad the census block group and tract data.\nYou can see that some blocks/tracts are only representative of the bay. We can clean up this data by retaining only the tracts in which the total population recorded in the latest American Community Survey (“ACSTOTPOP”) was above zero. This will remove tracts in which no people reside (e.g., large waterbodies, parks, or other natural areas)."
  },
  {
    "objectID": "underserved.html#view-by-census-tract",
    "href": "underserved.html#view-by-census-tract",
    "title": "Mapping underserved communities",
    "section": "View by Census Tract",
    "text": "View by Census Tract\nView a map showing the number of thresholds met per census tract (you may adapt to a different color scale of your choice).\n\nunderserved_other %>% \n  select(threshold_N) %>% \n  mapview(zcol = \"threshold_N\", col.regions = brewer.pal(6, \"Reds\"), layer.name = \"No. of Thresholds Met\")\n\n\n\n\n\n\nView the tracts that meet our more inclusive definition of underserved communities. The areas in red are those that rank in the 80th percentile (or greater) nationally in 2 or more of the demographic screening variables. They will serve as priority areas for increasing the equitable distribution of benefits from TBEP’s non-BIL funded environmental programs.\n\nunderserved_other %>% \n  select(underserved) %>% \n  mapview(zcol = \"underserved\", col.regions = list(\"gray\",\"red\"), layer.name = \"Underserved Communities (non-BIL)\")\n\n\n\n\n\n\nYou can save this final data as an RData object for future use.\n\nunderserved_other <- underserved_other %>%\n  filter(!is.na(funding))\n\n# save the layer as an RData object\nsave(underserved_other, file = 'data/underserved_other.RData')\n\n\nComparison of underserved community definitions\nWe can visualize the underserved census block groups meeting the EPA requirements for BIL funded projects against the backdrop of our more inclusive definition of underserved census tracts suitable for projects funded through other sources.\n\nm1 <- underserved_other %>% \n  select(funding) %>% \n  mapview(zcol= \"funding\", col.region = \"red\", alpha.regions = 1, layer.name = \"Project Funding\")\n\nm2 <- underserved_BIL %>% \n  select(funding) %>% \n  mapview(zcol = \"funding\", col.region = \"blue\", alpha.regions = 1, layer.name = \"Project Funding\")\n\nm1 + m2"
  },
  {
    "objectID": "underserved.html#view-by-drainage-basin",
    "href": "underserved.html#view-by-drainage-basin",
    "title": "Mapping underserved communities",
    "section": "View by Drainage Basin",
    "text": "View by Drainage Basin\nWhile the census tract delineations provide a practical map for identifying target neighborhoods and stakeholders that may be working for or in these underserved communities, it is not well-aligned with geographic delineations that are most informative for planning conservation and and restoration projects across the watershed.\nFor environmental planning purposes, TBEP will thus characterize unique water body assessment units according to the proportion of each unit containing underserved census tracts. This approach serves as a bridge between social and ecological units relevant to different stakeholders across Tampa Bay.\nThe Florida Department of Environmental Protection provides the Waterbody IDs (WBIDs) dataset, available here, which includes polygons delineating the drainage basins surrounding water body assessment units.\nLoad the drainage basin data.\n\ndbasins <- st_read('https://ca.dep.state.fl.us/arcgis/rest/services/OpenData/WBIDS/MapServer/0/query?outFields=*&where=1%3D1&f=geojson')\n\nReading layer `OGRGeoJSON' from data source \n  `https://ca.dep.state.fl.us/arcgis/rest/services/OpenData/WBIDS/MapServer/0/query?outFields=*&where=1%3D1&f=geojson' \n  using driver `GeoJSON'\nSimple feature collection with 6788 features and 17 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -87.6349 ymin: 24.39631 xmax: -79.97431 ymax: 31.00065\nGeodetic CRS:  WGS 84\n\n\nIntersect the layer with the Tampa Bay watershed.\n\nload(file = 'data/tbshed.RData')\n\nsf_use_s2(FALSE)\n\ntb_dbasins <- dbasins %>% \n  st_intersection(tbshed)\n\nSince we will be doing area calculations, we need to set a projected coordinate system for the drainage basin and census tract layers. The most appropriate CRS for Tampa Bay is EPSG 6443.\n\ntb_dbasins <- st_transform(tb_dbasins, crs = 6443)\nunderserved_other <- st_transform(underserved_other, crs = 6443)\n\nKeep only the land area within each drainage basin and census tract. We can exclude water areas by intersecting the layers with Florida’s shoreline (available here from the Florida Fish and Wildlife Conservation Commission).\n\nflshore <- st_read('https://atoll.floridamarine.org/arcgis/rest/services/FWC_GIS/OpenData_Shoreline/MapServer/0/query?outFields=*&where=1%3D1&f=geojson')\n\nReading layer `OGRGeoJSON' from data source \n  `https://atoll.floridamarine.org/arcgis/rest/services/FWC_GIS/OpenData_Shoreline/MapServer/0/query?outFields=*&where=1%3D1&f=geojson' \n  using driver `GeoJSON'\nSimple feature collection with 15470 features and 1 field\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: -87.63477 ymin: 24.52114 xmax: -80.03118 ymax: 31.00091\nGeodetic CRS:  WGS 84\n\nflshore <- st_transform(flshore, crs = 6443)\n\ntb_dbasins <- tb_dbasins %>% \n  st_intersection(flshore)\n\nunderserved_other <- underserved_other %>% \n  st_intersection(flshore)\n\nCalculate (1) the total land area of each drainage basin in the watershed and (2) the total area of underserved tracts within each drainage basin. Units are in feet for this projected coordinate system.\n\n# total basin area\nbasinareas <- tb_dbasins %>%\n  mutate(area_ft = st_area(tb_dbasins)) %>%\n  group_by(WBID) %>%\n  summarise(db_area_ft = sum(area_ft))\n\n# underserved area within basins\nbasin_int <- st_intersection(basinareas, underserved_other)\n\nbasin_underareas <- basin_int %>%\n  mutate(area_int_ft = st_area(basin_int)) %>%\n  group_by(WBID) %>%\n  summarise(under_area_ft = sum(area_int_ft)) %>%\n  as.data.frame()\n\n# join area estimates\nareasjoined <- left_join(basinareas, basin_underareas, by = 'WBID') %>%\n  rowwise() %>%\n  select(matches('^WBID|^db|^under')) %>%\n  as.data.frame()\n\ntb_dbasins_under <- left_join(tb_dbasins, areasjoined, by = 'WBID')\n\nCalculate the proportion of each drainage basin containing underserved communities.\n\ntb_dbasins_under <- tb_dbasins_under %>%\n  mutate(under_area_ft = ifelse(is.na(under_area_ft), 0, under_area_ft)) %>%\n  mutate(pct_under = under_area_ft/db_area_ft * 100) %>%\n  mutate(pct_under = as.numeric(pct_under)) %>% \n  select(WATERBODY_NAME, pct_under)\n\nCreate a map showing priority drainage basins based on the presence of underserved communities. Hover over the drainage basins to view the name of the water body assessment unit.\n\nmapviewOptions(\"basemaps.color.shuffle\" = FALSE)\n\ntb_dbasins_under %>% \n  select(WATERBODY_NAME, pct_under) %>% \n  mapview(zcol = \"pct_under\", col.regions = brewer.pal(6, \"Reds\"), at = seq(0, 100, 20), layer.name = \"Underserved Tracts (% of DB)\", label = \"WATERBODY_NAME\")"
  }
]