[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Getting EJScreen data",
    "section": "",
    "text": "The Tampa Bay Estuary Program (TBEP) is developing a methodology as part of its new Equity Strategy to identify historically underserved (i.e., disadvantaged) communities across the Tampa Bay watershed to support the goals of the White House’s Justice40 Initiative (EO 14008) and the Environmental Protection Agency’s Equity Action Plan (EO 13985). The purpose of this initiative is to ensure TBEP delivers equitable and fair access to the benefits from environmental programs for all communities.\nBelow, we have provided instructions for downloading the data that will be used to identify underserved communities in Tampa Bay. To view instructions for cleaning the data and utilizing the socioeconomic indices to map underserved communities, see XXXXXX [MARCUS EDIT].\nThe method described below is presented in R coding language, but users who prefer working with GIS software (e.g., ArcGIS or QGIS) should also be able to reproduce the maps by following along in the descriptions of each step.\nLoad the required R packages (install first as needed, tbeptools installation instructions are here)\n\nlibrary(sf)\nlibrary(mapview)\n\nTo collect socioeconomic data that will be used for identifying underserved communities, we will be downloading U.S. census data provided by the EPA’s 2022 Environmental Justice Screening Tool (EJScreen). This data is available from https://gaftp.epa.gov/EJSCREEN/2022/?C=S;O=A. Here you will find different versions of EJScreen data that are summarized, calculated, and visualized in different ways to meet your particular needs (e.g., census blocks or tracts, state or national percentiles, tabular or spatial data).\nIn our case, we are interested in obtaining spatial data for the supplemental demographic indices, summarized at the census tract level, using national percentiles as our thresholds for identifying underserved communities. The appropriate file to download for our requirements is “EJSCREEN_2022_Supplemental_with_AS_CNMI_GU_VI_Tracts.gdb.zip”. However, you may want to explore the files available to see if a different file is more appropriate based on your needs.\nDownload the relevant file from EJScreen. The file is downloaded to a temporary directory.\n\n# url with zip gdb to download\nurlin <- 'https://gaftp.epa.gov/EJSCREEN/2022/EJSCREEN_2022_Supplemental_with_AS_CNMI_GU_VI_Tracts.gdb.zip'\n\n# download file\ntmp1 <- tempfile(fileext = \"zip\")\ndownload.file(url = urlin, destfile = tmp1)\n\nUnzip the geodatabase that was downloaded to a second temporary directory.\n\n# unzip file\ntmp2 <- tempfile()\nutils::unzip(tmp1, exdir = tmp2, overwrite = TRUE)\n\nRead the polygon layer from the geodatabase.\n\n# get the layers from the gdb\ngdbpth <- list.files(tmp2, pattern = '\\\\.gdb$', full.names = T)\nlyrs <- st_layers(gdbpth)$name\n\n# read the layer\ndat <- st_read(dsn = gdbpth, lyrs)\n\nTo exclude census tracts outside of our watershed boundary, intersect the layer with the Tampa Bay watershed. If working in a different area, you will want to replace the tbshed shapefile with your own boundary file.\n\nload(file = 'data/tbshed.RData')\n\n# intersect the layer with the tb watershed\ndattb <- dat %>% \n  st_transform(crs = st_crs(tbshed)) %>% \n  st_make_valid() %>% \n  st_intersection(tbshed)\n\nView the data using mapview. You can see that we now have the desired spatial data just for our watershed.\n\n\n\n\nmapview(dattb)\n\n\n\n\n\n\nThe layer can be saved as an RData object if needed. The size should be pretty small (~1mb).\n\n# save the layer as an RData object (~1mb)\nsave(dattb, file = 'data/dattb.RData')\n\nUnlink the temporary files so they’re deleted when you’re done.\n\n# remove temp files\nunlink(tmp1, recursive = TRUE)\nunlink(tmp2, recursive = TRUE)"
  },
  {
    "objectID": "create.html",
    "href": "create.html",
    "title": "Creating the equity index",
    "section": "",
    "text": "Load the required R packages. .\n\nlibrary(sf)\nlibrary(mapview)\nlibrary(dplyr)\nlibrary(RColorBrewer)\n\nLoad the data.\n\nload(file = 'data/dattb.RData')\n\nCreate thresholds and remove bay tracts (population zero).\n\ndattbindex <- dattb %>%\n  filter(ACSTOTPOP > 0) %>%\n  mutate(threshold_income = ifelse(P_LWINCPCT >= 80, 1, 0),\n         threshold_unempl = ifelse(P_UNEMPPCT >= 80, 1, 0),\n         threshold_lingui = ifelse(P_LNGISPCT >= 80, 1, 0),\n         threshold_educat = ifelse(P_LESHSPCT >= 80, 1, 0),\n         threshold_lifexp = ifelse(P_LIFEEXPCT >= 80, 1, 0)) %>%\n  rowwise() %>%\n  select(matches('^threshold')) %>% \n  mutate(threshold_N = sum(threshold_income,threshold_unempl,threshold_lingui,threshold_educat,threshold_lifexp, na.rm = TRUE)) %>%\n  mutate(underserved = ifelse(threshold_N > 1, \"Yes\", \"No\"))\n\nView the first five rows.\n\nhead(dattbindex)\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: -82.45127 ymin: 28.03256 xmax: -82.39752 ymax: 28.05464\nGeodetic CRS:  WGS 84\n# A tibble: 6 × 8\n# Rowwise: \n  threshold_…¹ thres…² thres…³ thres…⁴ thres…⁵                     Shape thres…⁶\n         <dbl>   <dbl>   <dbl>   <dbl>   <dbl>             <POLYGON [°]>   <dbl>\n1            1       0       0       0      NA ((-82.42619 28.04506, -8…       1\n2            1       1       1       1       0 ((-82.42633 28.03258, -8…       4\n3            1       1       1       1       1 ((-82.4512 28.04362, -82…       5\n4            1       1       1       1      NA ((-82.44289 28.05294, -8…       4\n5            1       0       1       1       1 ((-82.45127 28.03364, -8…       4\n6            1       0       0       1       1 ((-82.43595 28.0391, -82…       3\n# … with 1 more variable: underserved <chr>, and abbreviated variable names\n#   ¹​threshold_income, ²​threshold_unempl, ³​threshold_lingui, ⁴​threshold_educat,\n#   ⁵​threshold_lifexp, ⁶​threshold_N\n\n\nMap the spatial data only.\n\nmapview(dattbindex)"
  }
]